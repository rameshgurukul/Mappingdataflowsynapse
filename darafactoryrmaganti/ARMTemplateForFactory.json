{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "darafactoryrmaganti"
		},
		"AzSQLLin_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzSQLLin'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"AzureSqlDatabase3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase3'"
		},
		"AzureSqlDatabasecdc_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabasecdc'"
		},
		"LS_Generic_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Generic'"
		},
		"RestService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RestService1'"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"SqlServerconfig_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerconfig'"
		},
		"adlsgen2lin_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'adlsgen2lin'"
		},
		"linkedService1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'linkedService1'"
		},
		"linkedService2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService2'"
		},
		"linkedServiceblobcdc_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedServiceblobcdc'"
		},
		"synpsdryrun-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synpsdryrun-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synpsdryrun.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsg2poc.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsg2poc.dfs.core.windows.net/"
		},
		"AzureDataLakeStorageWorkshop_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datafactoryrmaganti.dfs.core.windows.net/"
		},
		"AzureSqlDatabasecdc_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "mahsqlest.database.windows.net"
		},
		"AzureSqlDatabasecdc_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "configmetadata"
		},
		"AzureSqlDatabasecdc_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://"
		},
		"RestService1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "test"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "mahsqlest.database.windows.net"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "configmetadata"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"adlsgen2lin_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsg2poc.dfs.core.windows.net/"
		},
		"linkedService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsg2poc.dfs.core.windows.net/"
		},
		"synpsdryrun-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://strgdryrun.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Bronze_Curation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow bronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_bronze_curation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sinkbronze": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime7",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-09T22:46:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_bronze_curation')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Bronze_Curation_Upsert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_bronze_curation_upsert",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T05:30:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_bronze_curation_upsert')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Create_Complex')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Create_ComplexType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sink": {
										"ContainerName": "synpswrkshp",
										"DirectoryName": "OutputComplex"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-09T16:04:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_Create_ComplexType')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_DEBUG_EXPLORATION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow debug explore",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DataExploration",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcadls": {},
									"srcnewlkp": {},
									"snkadls": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "DataFlowWarmPoolIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-08T06:30:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_DataExploration')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/DataFlowWarmPoolIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_WINDOW_RANK')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_window_rank",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcelkp": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-09T15:03:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_window_rank')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Dynamic_ClusterSize_Audit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Parquet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_mask",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": {
									"value": "@if(greater(activity('Get Metadata').output.size,40000 ),8,4 )",
									"type": "Expression"
								},
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowswritten",
							"value": {
								"value": "@string(activity('Data flow1').output) ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"rowswritten": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-12T08:37:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/Dataflow_mask')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FactDIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_FactDIMtableloading",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-12T08:13:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_FactDIMtableloading')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Flowlet_PivotTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Pivot_MapDrifted",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sink": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "DataFlowWarmPoolIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-08T08:05:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Pivot_MapDrifted')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/DataFlowWarmPoolIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GENERIC_INGEST_WATERMARK')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Previous Watermark Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.table_store_watermark_value where TableName= '@{pipeline().parameters.TableName}' and servername = '@{pipeline().parameters.ServerName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Config",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lookup Current Watermark Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select MAX(@{pipeline().parameters.WaterMarkColumnName}) as NewWatermarkvalue from @{pipeline().parameters.TableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Copy data incremental watermark",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup Previous Watermark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup Current Watermark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.TableName} where @{pipeline().parameters.WaterMarkColumnName} > '@{activity('Lookup Previous Watermark Value').output.firstRow.WatermarkValue}' and @{pipeline().parameters.WaterMarkColumnName} <= '@{activity('Lookup Current Watermark Value').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN2",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.ADLSContainerName",
										"type": "Expression"
									},
									"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
								}
							}
						]
					},
					{
						"name": "Insert Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update WaterMark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Copy data incremental watermark').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Sucess",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy data incremental watermark').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerconfig",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data incremental watermark",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Copy data incremental watermark').output?.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy data incremental watermark').output?.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Copy data incremental watermark').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerconfig",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update WaterMark Value",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data incremental watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Update_WaterMark_Value]",
							"storedProcedureParameters": {
								"serverName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"watermark": {
									"value": {
										"value": "@activity('Lookup Current Watermark Value').output.firstRow.NewWatermarkvalue",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerconfig",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data to staging for incremental processing",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update WaterMark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLSGEN2",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": "@pipeline().parameters.ADLSContainerName",
									"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN2",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.StageDirectoryName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.ServerName,'/',pipeline().parameters.TableName)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sqlpocnonprod.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "POC"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "project_table"
					},
					"ADLSContainerName": {
						"type": "string",
						"defaultValue": "landingbronze"
					},
					"ADLSDirectoryName": {
						"type": "string"
					},
					"StageDirectoryName": {
						"type": "string",
						"defaultValue": "stgprocessing"
					},
					"WaterMarkColumnName": {
						"type": "string",
						"defaultValue": "Creationtime"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T15:44:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Config')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLSGEN2')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServerconfig')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GENERIC_INGEST_WATERMARK1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Previous Watermark Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.table_store_watermark_value where TableName= '@{pipeline().parameters.TableName}' and servername = '@{pipeline().parameters.ServerName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Config1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lookup Current Watermark Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select MAX(@{pipeline().parameters.WaterMarkColumnName}) as NewWatermarkvalue from @{pipeline().parameters.TableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Generic1",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Copy data incremental watermark",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup Previous Watermark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup Current Watermark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.TableName} where @{pipeline().parameters.WaterMarkColumnName} > '@{activity('Lookup Previous Watermark Value').output.firstRow.WatermarkValue}' and @{pipeline().parameters.WaterMarkColumnName} <= '@{activity('Lookup Current Watermark Value').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_Generic1",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN21",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.ADLSContainerName",
										"type": "Expression"
									},
									"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
								}
							}
						]
					},
					{
						"name": "Insert Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update WaterMark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Copy data incremental watermark').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Sucess",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy data incremental watermark').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data incremental watermark",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Copy data incremental watermark').output?.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy data incremental watermark').output?.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Copy data incremental watermark').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update WaterMark Value",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data incremental watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Update_WaterMark_Value]",
							"storedProcedureParameters": {
								"serverName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"watermark": {
									"value": {
										"value": "@activity('Lookup Current Watermark Value').output.firstRow.NewWatermarkvalue",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data to staging for incremental processing",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update WaterMark Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLSGEN21",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": "@pipeline().parameters.ADLSContainerName",
									"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN21",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.StageDirectoryName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.ServerName,'/',pipeline().parameters.TableName)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sqlpocnonprod.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "POC"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "project_table"
					},
					"ADLSContainerName": {
						"type": "string",
						"defaultValue": "landingbronze"
					},
					"ADLSDirectoryName": {
						"type": "string"
					},
					"StageDirectoryName": {
						"type": "string",
						"defaultValue": "stgprocessing"
					},
					"WaterMarkColumnName": {
						"type": "string",
						"defaultValue": "Creationtime"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Config1')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Generic1')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLSGEN21')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GENERIC_SQL_CDC_INGEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get CDC Change Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LookupLSNCDC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10) ; \nSET @begin_time = ''',activity('LookupLSNCDC').output.firstRow.CDCLastRun,''';\nSET @end_time = ''',pipeline().parameters.LSNEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than or equal'', @end_time);\nSELECT count(1) changecount FROM cdc.fn_cdc_get_net_changes_',pipeline().parameters.SchemaName,'_',pipeline().parameters.TableName,'(@from_lsn, @to_lsn, ''all'')')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "If Table has changed rows",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get CDC Change Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(activity('Get CDC Change Count').output.firstRow.changecount),0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy incremental data from CDC",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10) ; \nSET @begin_time = ''',activity('LookupLSNCDC').output.firstRow.CDCLastRun,''';\nSET @end_time = ''',pipeline().parameters.LSNEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than or equal'', @end_time);\nSELECT * FROM cdc.fn_cdc_get_all_changes_',pipeline().parameters.SchemaName,'_',pipeline().parameters.TableName,'(@from_lsn, @to_lsn, ''all'')')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": "@pipeline().parameters.ServerName",
												"DBName": {
													"value": "@pipeline().parameters.DBName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@pipeline().parameters.SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLSGEN2",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.ADLSContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data to staging for incremental processing",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy incremental data from CDC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLSGEN2",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": "@pipeline().parameters.ADLSContainerName",
												"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLSGEN2",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.StageDirectoryName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@concat(pipeline().parameters.ServerName,'/',pipeline().parameters.TableName)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Insert Log Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy incremental data from CDC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLog]",
										"storedProcedureParameters": {
											"BronzeCount": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DbName": {
												"value": {
													"value": "@pipeline().parameters.DBName",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunStatus": {
												"value": "Sucess",
												"type": "String"
											},
											"ServerName": {
												"value": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceCount": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TableName": {
												"value": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"error": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').error?.message",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SqlServerconfig",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Insert Log Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy incremental data from CDC",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLog]",
										"storedProcedureParameters": {
											"BronzeCount": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').output?.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DbName": {
												"value": {
													"value": "@pipeline().parameters.DBName",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunStatus": {
												"value": "Failure",
												"type": "String"
											},
											"ServerName": {
												"value": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceCount": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').output?.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TableName": {
												"value": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"error": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').error?.message",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SqlServerconfig",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Update LSN",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy incremental data from CDC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_CDCLSN_Version]",
										"storedProcedureParameters": {
											"lsn": {
												"value": {
													"value": "@pipeline().parameters.LSNEndTime",
													"type": "Expression"
												},
												"type": "String"
											},
											"serverName": {
												"value": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SqlServerconfig",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LookupLSNCDC",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "\nSelect * from dbo.table_store_CDC_version where TableName= '@{pipeline().parameters.TableName}' and servername = '@{pipeline().parameters.ServerName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Config",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sqlpocnonprod.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "POC"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "customers"
					},
					"LSNStartTime": {
						"type": "string",
						"defaultValue": "2023-02-18 00:17:01.087"
					},
					"LSNEndTime": {
						"type": "string",
						"defaultValue": "2023-02-20 08:37:01.087"
					},
					"ADLSContainerName": {
						"type": "string",
						"defaultValue": "landingbronze"
					},
					"ADLSDirectoryName": {
						"type": "string"
					},
					"StageDirectoryName": {
						"type": "string",
						"defaultValue": "stgprocessing"
					}
				},
				"variables": {
					"LSNVal": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T15:44:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Config')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLSGEN2')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServerconfig')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GENERIC_SQL_CDC_INGEST1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get CDC Change Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LookupLSNCDC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10) ; \nSET @begin_time = ''',activity('LookupLSNCDC').output.firstRow.CDCLastRun,''';\nSET @end_time = ''',pipeline().parameters.LSNEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than or equal'', @end_time);\nSELECT count(1) changecount FROM cdc.fn_cdc_get_net_changes_',pipeline().parameters.SchemaName,'_',pipeline().parameters.TableName,'(@from_lsn, @to_lsn, ''all'')')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Generic1",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "If Table has changed rows",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get CDC Change Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(activity('Get CDC Change Count').output.firstRow.changecount),0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy incremental data from CDC",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10) ; \nSET @begin_time = ''',activity('LookupLSNCDC').output.firstRow.CDCLastRun,''';\nSET @end_time = ''',pipeline().parameters.LSNEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than or equal'', @end_time);\nSELECT * FROM cdc.fn_cdc_get_all_changes_',pipeline().parameters.SchemaName,'_',pipeline().parameters.TableName,'(@from_lsn, @to_lsn, ''all'')')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Generic1",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": "@pipeline().parameters.ServerName",
												"DBName": {
													"value": "@pipeline().parameters.DBName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@pipeline().parameters.SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLSGEN21",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.ADLSContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data to staging for incremental processing",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy incremental data from CDC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLSGEN21",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": "@pipeline().parameters.ADLSContainerName",
												"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLSGEN21",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.StageDirectoryName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@concat(pipeline().parameters.ServerName,'/',pipeline().parameters.TableName)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Insert Log Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy incremental data from CDC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLog]",
										"storedProcedureParameters": {
											"BronzeCount": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DbName": {
												"value": {
													"value": "@pipeline().parameters.DBName",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunStatus": {
												"value": "Sucess",
												"type": "String"
											},
											"ServerName": {
												"value": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceCount": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TableName": {
												"value": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"error": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').error?.message",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SqlServer1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Insert Log Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy incremental data from CDC",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[InsertLog]",
										"storedProcedureParameters": {
											"BronzeCount": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').output?.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DbName": {
												"value": {
													"value": "@pipeline().parameters.DBName",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunStatus": {
												"value": "Failure",
												"type": "String"
											},
											"ServerName": {
												"value": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceCount": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').output?.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"TableName": {
												"value": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"error": {
												"value": {
													"value": "@activity('Copy incremental data from CDC').error?.message",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SqlServer1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Update LSN",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy incremental data from CDC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_CDCLSN_Version]",
										"storedProcedureParameters": {
											"lsn": {
												"value": {
													"value": "@pipeline().parameters.LSNEndTime",
													"type": "Expression"
												},
												"type": "String"
											},
											"serverName": {
												"value": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SqlServer1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LookupLSNCDC",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "\nSelect * from dbo.table_store_CDC_version where TableName= '@{pipeline().parameters.TableName}' and servername = '@{pipeline().parameters.ServerName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Config1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sqlpocnonprod.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "POC"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "customers"
					},
					"LSNStartTime": {
						"type": "string",
						"defaultValue": "2023-02-18 00:17:01.087"
					},
					"LSNEndTime": {
						"type": "string",
						"defaultValue": "2023-02-20 08:37:01.087"
					},
					"ADLSContainerName": {
						"type": "string",
						"defaultValue": "landingbronze"
					},
					"ADLSDirectoryName": {
						"type": "string"
					},
					"StageDirectoryName": {
						"type": "string",
						"defaultValue": "stgprocessing"
					}
				},
				"variables": {
					"LSNVal": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Generic1')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Config1')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLSGEN21')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GOLD_CurationStarSchema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Gold_StarSchema",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"source1": {},
									"source2": {},
									"sink": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T06:52:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_Gold_StarSchema')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Generic_Full_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to ADLS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": {
										"value": "@{pipeline().parameters.PartitionColumnName}",
										"type": "Expression"
									},
									"partitionUpperBound": {
										"value": "@{pipeline().parameters.PartitionUpperBound}",
										"type": "Expression"
									},
									"partitionLowerBound": {
										"value": "@{pipeline().parameters.PartitionLowerBound}",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"blockSizeInMB": 100
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN2",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.ADLSContainerName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Metadata Of Previous Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLSGEN2",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.ADLSContainerName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata Of Previous Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata Of Previous Files').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Move Previous Version",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLSGEN2",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.ADLSContainerName",
													"type": "Expression"
												},
												"DirectoryName": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLSGEN2",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.ArchivalContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Archived Files",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move Previous Version",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ADLSGEN2",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.ADLSContainerName",
													"type": "Expression"
												},
												"DirectoryName": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Copy data to ADLS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Sucess",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy data to ADLS').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Copy data to ADLS').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerconfig",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data to ADLS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Copy data to ADLS').output?.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy data to ADLS').output?.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Copy data to ADLS').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerconfig",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sqlpocnonprod.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "sqldbpoctrain"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "EnhancedGreenTaxiInfo"
					},
					"ADLSContainerName": {
						"type": "string",
						"defaultValue": "landingbronze"
					},
					"ADLSDirectoryName": {
						"type": "string"
					},
					"ArchivalContainerName": {
						"type": "string",
						"defaultValue": "stgprocessing"
					},
					"PartitionUpperBound": {
						"type": "string",
						"defaultValue": "2023-12-31T19:16:53Z"
					},
					"PartitionLowerBound": {
						"type": "string",
						"defaultValue": "2008-12-31T19:16:53Z"
					},
					"PartitionColumnName": {
						"type": "string",
						"defaultValue": "lpep_pickup_datetime"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T15:44:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLSGEN2')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServerconfig')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Generic_Full_Load1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to ADLS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": {
										"value": "@{pipeline().parameters.PartitionColumnName}",
										"type": "Expression"
									},
									"partitionUpperBound": {
										"value": "@{pipeline().parameters.PartitionUpperBound}",
										"type": "Expression"
									},
									"partitionLowerBound": {
										"value": "@{pipeline().parameters.PartitionLowerBound}",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"blockSizeInMB": 100
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_Generic1",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN21",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.ADLSContainerName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Metadata Of Previous Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLSGEN21",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.ADLSContainerName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata Of Previous Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata Of Previous Files').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Move Previous Version",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLSGEN21",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.ADLSContainerName",
													"type": "Expression"
												},
												"DirectoryName": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLSGEN21",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.ArchivalContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Archived Files",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move Previous Version",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ADLSGEN21",
											"type": "DatasetReference",
											"parameters": {
												"ADLSContainerName": {
													"value": "@pipeline().parameters.ADLSContainerName",
													"type": "Expression"
												},
												"DirectoryName": "@concat(pipeline().parameters.DBName,'/',pipeline().parameters.TableName)"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Copy data to ADLS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Sucess",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy data to ADLS').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Copy data to ADLS').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data to ADLS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Copy data to ADLS').output?.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy data to ADLS').output?.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Copy data to ADLS').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sqlpocnonprod.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "sqldbpoctrain"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "EnhancedGreenTaxiInfo"
					},
					"ADLSContainerName": {
						"type": "string",
						"defaultValue": "landingbronze"
					},
					"ADLSDirectoryName": {
						"type": "string"
					},
					"ArchivalContainerName": {
						"type": "string",
						"defaultValue": "stgprocessing"
					},
					"PartitionUpperBound": {
						"type": "string",
						"defaultValue": "2023-12-31T19:16:53.000Z"
					},
					"PartitionLowerBound": {
						"type": "string",
						"defaultValue": "2008-12-31T19:16:53.000Z"
					},
					"PartitionColumnName": {
						"type": "string",
						"defaultValue": "lpep_pickup_datetime"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Generic1')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLSGEN21')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Generic_Ingest_Executor_V1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Config Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "/****** Script for SelectTopNRows command from SSMS  ******/\nSELECT *\n      \n  FROM dbo.ControlTableIntegrated where IsActive='yes'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Config",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Record to Ingest",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Config Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Config Table').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnCopyBehavior",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().CopyMode",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CDC",
												"activities": [
													{
														"name": "Execute Pipeline CDC",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_GENERIC_SQL_CDC_INGEST",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"ServerName": {
																	"value": "@item().SourceServerName",
																	"type": "Expression"
																},
																"DBName": {
																	"value": "@item().SourceDBName",
																	"type": "Expression"
																},
																"SchemaName": {
																	"value": "@item().SchemaName",
																	"type": "Expression"
																},
																"TableName": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"LSNEndTime": {
																	"value": "@utcNow('yyyy-MM-dd HH:mm:ss:ff')",
																	"type": "Expression"
																},
																"ADLSContainerName": {
																	"value": "@item().ADLSContainerName",
																	"type": "Expression"
																},
																"StageDirectoryName": {
																	"value": "@item().StagingContainer",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "CHANGE TRACKING",
												"activities": [
													{
														"name": "Execute Pipeline Change Tracking",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_Generic_SQL_CHANGETRACKING",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"ServerName": {
																	"value": "@item().SourceServerName\n",
																	"type": "Expression"
																},
																"DBName": {
																	"value": "@item().SourceDBName",
																	"type": "Expression"
																},
																"SchemaName": {
																	"value": "@item().SchemaName",
																	"type": "Expression"
																},
																"TableName": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"ADLSContainerName": {
																	"value": "@item().ADLSContainerName",
																	"type": "Expression"
																},
																"StageDirectoryName": {
																	"value": "@item().StagingContainer",
																	"type": "Expression"
																},
																"ChangeColumnName": {
																	"value": "@item().DeltaColumnName",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "WATERMARK",
												"activities": [
													{
														"name": "Execute Pipeline WaterMark",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_GENERIC_INGEST_WATERMARK",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"ServerName": {
																	"value": "@item().SourceServerName\n",
																	"type": "Expression"
																},
																"DBName": {
																	"value": "@item().SourceDBName",
																	"type": "Expression"
																},
																"SchemaName": {
																	"value": "@item().SchemaName",
																	"type": "Expression"
																},
																"TableName": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"ADLSContainerName": {
																	"value": "@item().ADLSContainerName",
																	"type": "Expression"
																},
																"StageDirectoryName": {
																	"value": "@item().StagingContainer",
																	"type": "Expression"
																},
																"WaterMarkColumnName": {
																	"value": "@item().WaterMarkColumnName",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "FULL",
												"activities": [
													{
														"name": "Execute Pipeline Full",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_Generic_Full_Load",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"ServerName": {
																	"value": "@item().SourceServerName\n",
																	"type": "Expression"
																},
																"DBName": {
																	"value": "@item().SourceDBName",
																	"type": "Expression"
																},
																"SchemaName": {
																	"value": "@item().SchemaName",
																	"type": "Expression"
																},
																"TableName": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"ADLSContainerName": {
																	"value": "@item().ADLSContainerName",
																	"type": "Expression"
																},
																"ArchivalContainerName": {
																	"value": "@item().StagingContainer",
																	"type": "Expression"
																},
																"PartitionUpperBound": {
																	"value": "@item().PartitionUpperBound",
																	"type": "Expression"
																},
																"PartitionLowerBound": {
																	"value": "@item().PartitionLowerBound",
																	"type": "Expression"
																},
																"PartitionColumnName": {
																	"value": "@item().PartitionColumnName",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T15:44:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Config')]",
				"[concat(variables('factoryId'), '/pipelines/PL_GENERIC_SQL_CDC_INGEST')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Generic_SQL_CHANGETRACKING')]",
				"[concat(variables('factoryId'), '/pipelines/PL_GENERIC_INGEST_WATERMARK')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Generic_Full_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Generic_Ingest_Executor_V11')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Config Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "/****** Script for SelectTopNRows command from SSMS  ******/\nSELECT *\n      \n  FROM dbo.ControlTableIntegrated where IsActive='yes'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Config1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Record to Ingest",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Config Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Config Table').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnCopyBehavior",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().CopyMode",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CDC",
												"activities": [
													{
														"name": "Execute Pipeline CDC",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_GENERIC_SQL_CDC_INGEST1",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"ServerName": {
																	"value": "@item().SourceServerName",
																	"type": "Expression"
																},
																"DBName": {
																	"value": "@item().SourceDBName",
																	"type": "Expression"
																},
																"SchemaName": {
																	"value": "@item().SchemaName",
																	"type": "Expression"
																},
																"TableName": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"LSNEndTime": {
																	"value": "@utcNow('yyyy-MM-dd HH:mm:ss:ff')",
																	"type": "Expression"
																},
																"ADLSContainerName": {
																	"value": "@item().ADLSContainerName",
																	"type": "Expression"
																},
																"StageDirectoryName": {
																	"value": "@item().StagingContainer",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "CHANGE TRACKING",
												"activities": [
													{
														"name": "Execute Pipeline Change Tracking",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_Generic_SQL_CHANGETRACKING1",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"ServerName": {
																	"value": "@item().SourceServerName\n",
																	"type": "Expression"
																},
																"DBName": {
																	"value": "@item().SourceDBName",
																	"type": "Expression"
																},
																"SchemaName": {
																	"value": "@item().SchemaName",
																	"type": "Expression"
																},
																"TableName": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"ADLSContainerName": {
																	"value": "@item().ADLSContainerName",
																	"type": "Expression"
																},
																"StageDirectoryName": {
																	"value": "@item().StagingContainer",
																	"type": "Expression"
																},
																"ChangeColumnName": {
																	"value": "@item().DeltaColumnName",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "WATERMARK",
												"activities": [
													{
														"name": "Execute Pipeline WaterMark",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_GENERIC_INGEST_WATERMARK1",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"ServerName": {
																	"value": "@item().SourceServerName\n",
																	"type": "Expression"
																},
																"DBName": {
																	"value": "@item().SourceDBName",
																	"type": "Expression"
																},
																"SchemaName": {
																	"value": "@item().SchemaName",
																	"type": "Expression"
																},
																"TableName": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"ADLSContainerName": {
																	"value": "@item().ADLSContainerName",
																	"type": "Expression"
																},
																"StageDirectoryName": {
																	"value": "@item().StagingContainer",
																	"type": "Expression"
																},
																"WaterMarkColumnName": {
																	"value": "@item().WaterMarkColumnName",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "FULL",
												"activities": [
													{
														"name": "Execute Pipeline Full",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_Generic_Full_Load1",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"ServerName": {
																	"value": "@item().SourceServerName\n",
																	"type": "Expression"
																},
																"DBName": {
																	"value": "@item().SourceDBName",
																	"type": "Expression"
																},
																"SchemaName": {
																	"value": "@item().SchemaName",
																	"type": "Expression"
																},
																"TableName": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"ADLSContainerName": {
																	"value": "@item().ADLSContainerName",
																	"type": "Expression"
																},
																"ArchivalContainerName": {
																	"value": "@item().StagingContainer",
																	"type": "Expression"
																},
																"PartitionUpperBound": {
																	"value": "@item().PartitionUpperBound",
																	"type": "Expression"
																},
																"PartitionLowerBound": {
																	"value": "@item().PartitionLowerBound",
																	"type": "Expression"
																},
																"PartitionColumnName": {
																	"value": "@item().PartitionColumnName",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Config1')]",
				"[concat(variables('factoryId'), '/pipelines/PL_GENERIC_SQL_CDC_INGEST1')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Generic_SQL_CHANGETRACKING1')]",
				"[concat(variables('factoryId'), '/pipelines/PL_GENERIC_INGEST_WATERMARK1')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Generic_Full_Load1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Generic_SQL_CHANGETRACKING')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupCurrentChangeTrackingVersionActivity",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LookupLastChangeTrackingVersionActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT CHANGE_TRACKING_CURRENT_VERSION() as CurrentChangeTrackingVersion",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "LookupLastChangeTrackingVersionActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "\nSelect * from table_store_ChangeTracking_version where TableName= '@{pipeline().parameters.TableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Config",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Incremental Data Copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentChangeTrackingVersionActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT c.*,CT.SYS_CHANGE_VERSION, SYS_CHANGE_OPERATION , CT.@{pipeline().parameters.ChangeColumnName} as  'PrimaryKeyValue'\n\nfrom @{pipeline().parameters.TableName}  c\n\nRIGHT OUTER JOIN \n\nCHANGETABLE(CHANGES @{pipeline().parameters.TableName} , @{activity('LookupLastChangeTrackingVersionActivity').output.firstRow.SYS_CHANGE_VERSION}) AS CT \n\nON c.@{pipeline().parameters.ChangeColumnName}  = CT.@{pipeline().parameters.ChangeColumnName}  where CT.SYS_CHANGE_VERSION <= @{activity('LookupCurrentChangeTrackingVersionActivity').output.firstRow.CurrentChangeTrackingVersion}\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN2",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.ADLSContainerName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "updatechnagetracking",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Incremental Data Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Update_ChangeTracking_Version]",
							"storedProcedureParameters": {
								"CurrentTrackingVersion": {
									"value": {
										"value": "@activity('LookupCurrentChangeTrackingVersionActivity').output.firstRow.CurrentChangeTrackingVersion",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerconfig",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "updatechnagetracking",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Incremental Data Copy').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Sucess",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Incremental Data Copy').output.rowsRead\n",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Incremental Data Copy').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerconfig",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "updatechnagetracking",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Incremental Data Copy').output?.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Incremental Data Copy').output?.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Incremental Data Copy').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServerconfig",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data to staging for incremental processing",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "updatechnagetracking",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLSGEN2",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": "@pipeline().parameters.ADLSContainerName",
									"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN2",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.StageDirectoryName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.ServerName,'/',pipeline().parameters.TableName)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sqlpocnonprod.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "POC"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "source_table"
					},
					"ADLSContainerName": {
						"type": "string",
						"defaultValue": "landingbronze"
					},
					"ADLSDirectoryName": {
						"type": "string"
					},
					"StageDirectoryName": {
						"type": "string",
						"defaultValue": "stgprocessing"
					},
					"ChangeColumnName": {
						"type": "String",
						"defaultValue": "PersonID"
					}
				},
				"variables": {
					"LSNVal": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-20T15:44:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Config')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLSGEN2')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServerconfig')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Generic_SQL_CHANGETRACKING1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupCurrentChangeTrackingVersionActivity",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LookupLastChangeTrackingVersionActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT CHANGE_TRACKING_CURRENT_VERSION() as CurrentChangeTrackingVersion",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Generic1",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "LookupLastChangeTrackingVersionActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "\nSelect * from table_store_ChangeTracking_version where TableName= '@{pipeline().parameters.TableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Config1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Incremental Data Copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentChangeTrackingVersionActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT c.*,CT.SYS_CHANGE_VERSION, SYS_CHANGE_OPERATION , CT.@{pipeline().parameters.ChangeColumnName} as  'PrimaryKeyValue'\n\nfrom @{pipeline().parameters.TableName}  c\n\nRIGHT OUTER JOIN \n\nCHANGETABLE(CHANGES @{pipeline().parameters.TableName} , @{activity('LookupLastChangeTrackingVersionActivity').output.firstRow.SYS_CHANGE_VERSION}) AS CT \n\nON c.@{pipeline().parameters.ChangeColumnName}  = CT.@{pipeline().parameters.ChangeColumnName}  where CT.SYS_CHANGE_VERSION <= @{activity('LookupCurrentChangeTrackingVersionActivity').output.firstRow.CurrentChangeTrackingVersion}\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_Generic1",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN21",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.ADLSContainerName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "updatechnagetracking",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Incremental Data Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Update_ChangeTracking_Version]",
							"storedProcedureParameters": {
								"CurrentTrackingVersion": {
									"value": {
										"value": "@activity('LookupCurrentChangeTrackingVersionActivity').output.firstRow.CurrentChangeTrackingVersion",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "updatechnagetracking",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Incremental Data Copy').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Sucess",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Incremental Data Copy').output.rowsRead\n",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Incremental Data Copy').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "updatechnagetracking",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[InsertLog]",
							"storedProcedureParameters": {
								"BronzeCount": {
									"value": {
										"value": "@activity('Incremental Data Copy').output?.rowsCopied",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DbName": {
									"value": {
										"value": "@pipeline().parameters.DBName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ServerName": {
									"value": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Incremental Data Copy').output?.rowsRead",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"error": {
									"value": {
										"value": "@activity('Incremental Data Copy').error?.message",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data to staging for incremental processing",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "updatechnagetracking",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLSGEN21",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": "@pipeline().parameters.ADLSContainerName",
									"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLSGEN21",
								"type": "DatasetReference",
								"parameters": {
									"ADLSContainerName": {
										"value": "@pipeline().parameters.StageDirectoryName",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(pipeline().parameters.ServerName,'/',pipeline().parameters.TableName)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sqlpocnonprod.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "POC"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "source_table"
					},
					"ADLSContainerName": {
						"type": "string",
						"defaultValue": "landingbronze"
					},
					"ADLSDirectoryName": {
						"type": "string"
					},
					"StageDirectoryName": {
						"type": "string",
						"defaultValue": "stgprocessing"
					},
					"ChangeColumnName": {
						"type": "String",
						"defaultValue": "PersonID"
					}
				},
				"variables": {
					"LSNVal": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Generic1')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Config1')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLSGEN21')]",
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Parse_Json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_ParseJson",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T07:21:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_ParseJson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Partition_Optimize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow partition",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Partioning_Optmize",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcDF": {},
									"sinkdelta": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "DataFlowWarmPoolIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-08T06:48:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Partioning_Optmize')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/DataFlowWarmPoolIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SCD1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_SCD1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source2": {},
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-11T22:31:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_SCD1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SCD1_Prep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_SCD1_PREP",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-11T15:23:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_SCD1_PREP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SCD2_Prep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_SCD2_PREP",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-11T22:32:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_SCD2_PREP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SCD_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_SCD2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source2": {},
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-12T00:16:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_SCD2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Silver_Curation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_Silver_Curation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"sourcelkp": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T06:30:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_Silver_Curation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_warmup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_WarmUpCluster",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataflowruntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-12T08:50:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_WarmUpCluster')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/dataflowruntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineaggdemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowaggdemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "dataflowruntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowaggdemo')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/dataflowruntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLSGEN2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageWorkshop",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ADLSContainerName": {
						"type": "string"
					},
					"DirectoryName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ADLSContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLSGEN21')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageWorkshop",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ADLSContainerName": {
						"type": "string"
					},
					"DirectoryName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ADLSContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageWorkshop",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "green_tripdata_2022-11.parquet",
						"fileSystem": "synpswrkshp"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "lpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "lpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "ehail_fee",
						"type": "INT32"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "payment_type",
						"type": "DOUBLE"
					},
					{
						"name": "trip_type",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Config')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerconfig",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TableID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceServerName",
						"type": "varchar"
					},
					{
						"name": "SourceDBName",
						"type": "varchar"
					},
					{
						"name": "SourceTableName",
						"type": "varchar"
					},
					{
						"name": "SchemaName",
						"type": "varchar"
					},
					{
						"name": "PartitionColumnName",
						"type": "varchar"
					},
					{
						"name": "PartitionLowerBound",
						"type": "varchar"
					},
					{
						"name": "PartitionUpperBound",
						"type": "varchar"
					},
					{
						"name": "ADLSContainerName",
						"type": "varchar"
					},
					{
						"name": "ADLSStoragePath",
						"type": "varchar"
					},
					{
						"name": "ADLSArchivalPath",
						"type": "varchar"
					},
					{
						"name": "CopyMode",
						"type": "varchar"
					},
					{
						"name": "DeltaColumnName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ControlTableIntegrated"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerconfig')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Config1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TableID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceServerName",
						"type": "varchar"
					},
					{
						"name": "SourceDBName",
						"type": "varchar"
					},
					{
						"name": "SourceTableName",
						"type": "varchar"
					},
					{
						"name": "SchemaName",
						"type": "varchar"
					},
					{
						"name": "PartitionColumnName",
						"type": "varchar"
					},
					{
						"name": "PartitionLowerBound",
						"type": "varchar"
					},
					{
						"name": "PartitionUpperBound",
						"type": "varchar"
					},
					{
						"name": "ADLSContainerName",
						"type": "varchar"
					},
					{
						"name": "ADLSStoragePath",
						"type": "varchar"
					},
					{
						"name": "ADLSArchivalPath",
						"type": "varchar"
					},
					{
						"name": "CopyMode",
						"type": "varchar"
					},
					{
						"name": "DeltaColumnName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ControlTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Generic",
					"type": "LinkedServiceReference",
					"parameters": {
						"SqlServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DBName": {
							"value": "@dataset().DBName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DBName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Generic1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Generic",
					"type": "LinkedServiceReference",
					"parameters": {
						"SqlServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DBName": {
							"value": "@dataset().DBName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DBName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetParam')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageWorkshop",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"DirectoryName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageWorkshop",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Output",
						"fileSystem": "synpswrkshp"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSQLLin')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('AzSQLLin_connectionString')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('AzureBlobStorage1_connectionString')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime6",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime6",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageWorkshop')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageWorkshop_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime8",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_connectionString')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime4",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase2_connectionString')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime4",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase3_connectionString')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabasecdc')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabasecdc_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabasecdc_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabasecdc_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabasecdc_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime5",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Generic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"SqlServerName": {
						"type": "string"
					},
					"DBName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('LS_Generic_connectionString')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime7",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('RestService1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RestService1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime7",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerconfig')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('SqlServerconfig_connectionString')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime7",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsgen2lin')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('adlsgen2lin_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('adlsgen2lin_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('linkedService1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('linkedService1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime4",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('linkedService2_connectionString')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime4",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedServiceblobcdc')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('linkedServiceblobcdc_connectionString')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime5",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/synpsdryrun-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('synpsdryrun-WorkspaceDefaultSqlServer_connectionString')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/synpsdryrun-WorkspaceDefaultStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synpsdryrun-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowWarmPoolIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 60,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntegrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 240,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowruntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 60,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime3')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime4')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime5')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime6')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime7')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhosted')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Parquet",
								"type": "DatasetReference"
							},
							"name": "srcadls"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "countbypuloc"
						}
					],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> srcadls",
						"srcadls aggregate(groupBy(PULocationID),",
						"     countoftrips = count()) ~> countbypuloc",
						"countbypuloc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DataExploration')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Parquet",
								"type": "DatasetReference"
							},
							"name": "srcadls"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "srcnewlkp"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "snkadls"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> srcadls",
						"source(output(",
						"          {_col0_} as string,",
						"          {_col1_} as string,",
						"          {_col2_} as string,",
						"          {_col3_} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'taxizonelookup.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false) ~> srcnewlkp",
						"srcadls sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'Delta',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> snkadls"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Partioning_Optmize')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Parquet",
								"type": "DatasetReference"
							},
							"name": "srcDF"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sinkdelta"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> srcDF",
						"srcDF sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'Delta',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          PULocationID",
						"     )) ~> sinkdelta"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Pivot_MapDrifted')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetSink",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "pivot"
						},
						{
							"name": "derivedColumn"
						},
						{
							"name": "select"
						},
						{
							"name": "MapDrifted",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "compose",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
						"select pivot(groupBy(pickupdate),",
						"     pivotBy(PULocationID),",
						"     num_of_ = count(1),",
						"     columnNaming: '$N$V_count',",
						"     lateral: false) ~> pivot",
						"compose@output derive(pickupdate = toDate(lpep_pickup_datetime)) ~> derivedColumn",
						"derivedColumn select(mapColumn(",
						"          VendorID,",
						"          store_and_fwd_flag,",
						"          RatecodeID,",
						"          PULocationID,",
						"          DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          pickupdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"pivot derive(num_of_1_count = toLong(byName('num_of_1_count')),",
						"          num_of_7_count = toLong(byName('num_of_7_count')),",
						"          num_of_18_count = toLong(byName('num_of_18_count')),",
						"          num_of_21_count = toLong(byName('num_of_21_count')),",
						"          num_of_24_count = toLong(byName('num_of_24_count')),",
						"          num_of_25_count = toLong(byName('num_of_25_count')),",
						"          num_of_33_count = toLong(byName('num_of_33_count')),",
						"          num_of_35_count = toLong(byName('num_of_35_count')),",
						"          num_of_36_count = toLong(byName('num_of_36_count')),",
						"          num_of_37_count = toLong(byName('num_of_37_count')),",
						"          num_of_41_count = toLong(byName('num_of_41_count')),",
						"          num_of_42_count = toLong(byName('num_of_42_count')),",
						"          num_of_43_count = toLong(byName('num_of_43_count')),",
						"          num_of_47_count = toLong(byName('num_of_47_count')),",
						"          num_of_49_count = toLong(byName('num_of_49_count')),",
						"          num_of_52_count = toLong(byName('num_of_52_count')),",
						"          num_of_55_count = toLong(byName('num_of_55_count')),",
						"          num_of_56_count = toLong(byName('num_of_56_count')),",
						"          num_of_61_count = toLong(byName('num_of_61_count')),",
						"          num_of_65_count = toLong(byName('num_of_65_count')),",
						"          num_of_66_count = toLong(byName('num_of_66_count')),",
						"          num_of_70_count = toLong(byName('num_of_70_count')),",
						"          num_of_72_count = toLong(byName('num_of_72_count')),",
						"          num_of_73_count = toLong(byName('num_of_73_count')),",
						"          num_of_74_count = toLong(byName('num_of_74_count')),",
						"          num_of_75_count = toLong(byName('num_of_75_count')),",
						"          num_of_76_count = toLong(byName('num_of_76_count')),",
						"          num_of_77_count = toLong(byName('num_of_77_count')),",
						"          num_of_80_count = toLong(byName('num_of_80_count')),",
						"          num_of_82_count = toLong(byName('num_of_82_count')),",
						"          num_of_83_count = toLong(byName('num_of_83_count')),",
						"          num_of_91_count = toLong(byName('num_of_91_count')),",
						"          num_of_92_count = toLong(byName('num_of_92_count')),",
						"          num_of_93_count = toLong(byName('num_of_93_count')),",
						"          num_of_95_count = toLong(byName('num_of_95_count')),",
						"          num_of_97_count = toLong(byName('num_of_97_count')),",
						"          num_of_98_count = toLong(byName('num_of_98_count')),",
						"          num_of_102_count = toLong(byName('num_of_102_count')),",
						"          num_of_106_count = toLong(byName('num_of_106_count')),",
						"          num_of_116_count = toLong(byName('num_of_116_count')),",
						"          num_of_120_count = toLong(byName('num_of_120_count')),",
						"          num_of_122_count = toLong(byName('num_of_122_count')),",
						"          num_of_126_count = toLong(byName('num_of_126_count')),",
						"          num_of_127_count = toLong(byName('num_of_127_count')),",
						"          num_of_129_count = toLong(byName('num_of_129_count')),",
						"          num_of_130_count = toLong(byName('num_of_130_count')),",
						"          num_of_134_count = toLong(byName('num_of_134_count')),",
						"          num_of_135_count = toLong(byName('num_of_135_count')),",
						"          num_of_139_count = toLong(byName('num_of_139_count')),",
						"          num_of_145_count = toLong(byName('num_of_145_count')),",
						"          num_of_146_count = toLong(byName('num_of_146_count')),",
						"          num_of_152_count = toLong(byName('num_of_152_count')),",
						"          num_of_153_count = toLong(byName('num_of_153_count')),",
						"          num_of_157_count = toLong(byName('num_of_157_count')),",
						"          num_of_159_count = toLong(byName('num_of_159_count')),",
						"          num_of_166_count = toLong(byName('num_of_166_count')),",
						"          num_of_167_count = toLong(byName('num_of_167_count')),",
						"          num_of_168_count = toLong(byName('num_of_168_count')),",
						"          num_of_169_count = toLong(byName('num_of_169_count')),",
						"          num_of_171_count = toLong(byName('num_of_171_count')),",
						"          num_of_173_count = toLong(byName('num_of_173_count')),",
						"          num_of_174_count = toLong(byName('num_of_174_count')),",
						"          num_of_181_count = toLong(byName('num_of_181_count')),",
						"          num_of_183_count = toLong(byName('num_of_183_count')),",
						"          num_of_189_count = toLong(byName('num_of_189_count')),",
						"          num_of_191_count = toLong(byName('num_of_191_count')),",
						"          num_of_192_count = toLong(byName('num_of_192_count')),",
						"          num_of_193_count = toLong(byName('num_of_193_count')),",
						"          num_of_194_count = toLong(byName('num_of_194_count')),",
						"          num_of_196_count = toLong(byName('num_of_196_count')),",
						"          num_of_197_count = toLong(byName('num_of_197_count')),",
						"          num_of_207_count = toLong(byName('num_of_207_count')),",
						"          num_of_210_count = toLong(byName('num_of_210_count')),",
						"          num_of_212_count = toLong(byName('num_of_212_count')),",
						"          num_of_213_count = toLong(byName('num_of_213_count')),",
						"          num_of_215_count = toLong(byName('num_of_215_count')),",
						"          num_of_216_count = toLong(byName('num_of_216_count')),",
						"          num_of_220_count = toLong(byName('num_of_220_count')),",
						"          num_of_223_count = toLong(byName('num_of_223_count')),",
						"          num_of_226_count = toLong(byName('num_of_226_count')),",
						"          num_of_227_count = toLong(byName('num_of_227_count')),",
						"          num_of_228_count = toLong(byName('num_of_228_count')),",
						"          num_of_232_count = toLong(byName('num_of_232_count')),",
						"          num_of_236_count = toLong(byName('num_of_236_count')),",
						"          num_of_241_count = toLong(byName('num_of_241_count')),",
						"          num_of_242_count = toLong(byName('num_of_242_count')),",
						"          num_of_243_count = toLong(byName('num_of_243_count')),",
						"          num_of_244_count = toLong(byName('num_of_244_count')),",
						"          num_of_247_count = toLong(byName('num_of_247_count')),",
						"          num_of_248_count = toLong(byName('num_of_248_count')),",
						"          num_of_250_count = toLong(byName('num_of_250_count')),",
						"          num_of_253_count = toLong(byName('num_of_253_count')),",
						"          num_of_254_count = toLong(byName('num_of_254_count')),",
						"          num_of_255_count = toLong(byName('num_of_255_count')),",
						"          num_of_256_count = toLong(byName('num_of_256_count')),",
						"          num_of_259_count = toLong(byName('num_of_259_count')),",
						"          num_of_260_count = toLong(byName('num_of_260_count')),",
						"          num_of_263_count = toLong(byName('num_of_263_count')),",
						"          num_of_264_count = toLong(byName('num_of_264_count')),",
						"          num_of_265_count = toLong(byName('num_of_265_count'))) ~> MapDrifted",
						"MapDrifted sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]",
				"[concat(variables('factoryId'), '/datasets/ParquetSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SelfJoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Parquet",
								"type": "DatasetReference"
							},
							"name": "sourceadls"
						},
						{
							"dataset": {
								"referenceName": "DS_Parquet",
								"type": "DatasetReference"
							},
							"name": "dupsource"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "DailyTip"
						},
						{
							"name": "join"
						},
						{
							"name": "derivedColumn"
						},
						{
							"name": "derivedColumndup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceadls",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> dupsource",
						"sourceadls select(mapColumn(",
						"          VendorID,",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          RatecodeID,",
						"          PULocationID,",
						"          DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"derivedColumn aggregate(groupBy(pickupdate),",
						"     sumtip = sum(tip_amount)) ~> DailyTip",
						"derivedColumndup, DailyTip join(derivedColumndup@pickupdate == DailyTip@pickupdate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join",
						"select derive(pickupdate = toDate(lpep_pickup_datetime)) ~> derivedColumn",
						"dupsource derive(pickupdate = toDate(lpep_dropoff_datetime)) ~> derivedColumndup",
						"join sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'synpswrkshp',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SurrogateKeyIdentity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetSink",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey"
						},
						{
							"name": "compose",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
						"compose@output keyGenerate(output(surrogatekey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]",
				"[concat(variables('factoryId'), '/datasets/ParquetSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Create_ComplexType')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetParam",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "compose",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
						"compose@output derive(locationdetails = @(pickuploc=PULocationID,",
						"          dropoffloc=DOLocationID)) ~> derivedColumn",
						"derivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]",
				"[concat(variables('factoryId'), '/datasets/ParquetParam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Dedup_Patterns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "aggregate2"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "select1"
						},
						{
							"name": "compose",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "compose1",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
						"compose(composition: 'FLW_GreenTaxi') ~> compose1@(output)",
						"compose@output aggregate(rowcount = count(1)) ~> aggregate2",
						"select1 aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctRows",
						"DistinctRows aggregate(rcnt = count(1)) ~> aggregate3",
						"compose1@output select(mapColumn(",
						"          VendorID,",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          PULocationID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_FactDIMtableloading')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source4"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "selectdimpickup"
						},
						{
							"name": "DistinctRows1"
						},
						{
							"name": "selectdimdropoff"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "surrogateKey2"
						},
						{
							"name": "select3"
						},
						{
							"name": "surrogateKey3"
						},
						{
							"name": "join1"
						},
						{
							"name": "select4"
						},
						{
							"name": "join2"
						},
						{
							"name": "select5"
						},
						{
							"name": "join3"
						},
						{
							"name": "select6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          PU_Borough as string,",
						"          PU_Zone as string,",
						"          PU_service_zone as string,",
						"          DO_Borough as string,",
						"          Do_Zone as string,",
						"          DO_service_zone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'silver/nycgreentaxienhanced') ~> source1",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          PU_Borough as string,",
						"          PU_Zone as string,",
						"          PU_service_zone as string,",
						"          DO_Borough as string,",
						"          Do_Zone as string,",
						"          DO_service_zone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'silver/nycgreentaxienhanced') ~> source2",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          PU_Borough as string,",
						"          PU_Zone as string,",
						"          PU_service_zone as string,",
						"          DO_Borough as string,",
						"          Do_Zone as string,",
						"          DO_service_zone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'silver/nycgreentaxienhanced') ~> source3",
						"source(output(",
						"          VendorID as short,",
						"          VendorDescription as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'vendoridlkp.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source4",
						"source1 select(mapColumn(",
						"          PULocationID,",
						"          PU_Borough,",
						"          PU_Zone,",
						"          PU_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimpickup",
						"selectdimpickup aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctRows1",
						"source2 select(mapColumn(",
						"          DOLocationID,",
						"          DO_Borough,",
						"          Do_Zone,",
						"          DO_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimdropoff",
						"selectdimdropoff aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctRows",
						"DistinctRows1 select(mapColumn(",
						"          PULocationID,",
						"          PU_Borough,",
						"          PU_Zone,",
						"          PU_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"DistinctRows select(mapColumn(",
						"          DOLocationID,",
						"          DO_Borough,",
						"          Do_Zone,",
						"          DO_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1 keyGenerate(output(pickupsurrogate as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"select2 keyGenerate(output(dropoffsurrogatekey as long),",
						"     startAt: 100L,",
						"     stepValue: 1L) ~> surrogateKey2",
						"source3 select(mapColumn(",
						"          VendorID,",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          PULocationID,",
						"          DOLocationID,",
						"          trip_distance,",
						"          fare_amount,",
						"          tip_amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"source4 keyGenerate(output(vendorsurrogate as long),",
						"     startAt: 1000L,",
						"     stepValue: 1L) ~> surrogateKey3",
						"select3, surrogateKey1 join(select3@PULocationID == select1@PULocationID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          VendorID,",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          DOLocationID,",
						"          trip_distance,",
						"          fare_amount,",
						"          tip_amount,",
						"          pickupsurrogate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, surrogateKey2 join(select4@DOLocationID == select2@DOLocationID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          VendorID,",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          trip_distance,",
						"          fare_amount,",
						"          tip_amount,",
						"          pickupsurrogate,",
						"          dropoffsurrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5, surrogateKey3 join(select5@VendorID == source4@VendorID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          trip_distance,",
						"          fare_amount,",
						"          tip_amount,",
						"          pickupsurrogate,",
						"          dropoffsurrogatekey,",
						"          vendorsurrogate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'gold/dimpickupsurrogate',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"surrogateKey2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'gold/dimdropoffsurrogate',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"surrogateKey3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'gold/dimvendorsurrogate',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"select6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'gold/nyctaxifact',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Gold_StarSchema')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "derivedColumn"
						},
						{
							"name": "selectdimpickup"
						},
						{
							"name": "DistinctRows1"
						},
						{
							"name": "selectdimdropoff"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          PU_Borough as string,",
						"          PU_Zone as string,",
						"          PU_service_zone as string,",
						"          DO_Borough as string,",
						"          Do_Zone as string,",
						"          DO_service_zone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'silver/nycgreentaxienhanced') ~> source",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          PU_Borough as string,",
						"          PU_Zone as string,",
						"          PU_service_zone as string,",
						"          DO_Borough as string,",
						"          Do_Zone as string,",
						"          DO_service_zone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'silver/nycgreentaxienhanced') ~> source1",
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double,",
						"          PU_Borough as string,",
						"          PU_Zone as string,",
						"          PU_service_zone as string,",
						"          DO_Borough as string,",
						"          Do_Zone as string,",
						"          DO_service_zone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'silver/nycgreentaxienhanced') ~> source2",
						"source select(mapColumn(",
						"          VendorID,",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          PULocationID,",
						"          DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          tip_amount,",
						"          total_amount,",
						"          PU_Borough,",
						"          PU_Zone,",
						"          PU_service_zone,",
						"          DO_Borough,",
						"          Do_Zone,",
						"          DO_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select derive(pickupdate = toDate(lpep_pickup_datetime)) ~> derivedColumn",
						"source1 select(mapColumn(",
						"          PULocationID,",
						"          PU_Borough,",
						"          PU_Zone,",
						"          PU_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimpickup",
						"selectdimpickup aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctRows1",
						"source2 select(mapColumn(",
						"          DOLocationID,",
						"          DO_Borough,",
						"          Do_Zone,",
						"          DO_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdimdropoff",
						"selectdimdropoff aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctRows",
						"DistinctRows1 select(mapColumn(",
						"          PULocationID,",
						"          PU_Borough,",
						"          PU_Zone,",
						"          PU_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"DistinctRows select(mapColumn(",
						"          DOLocationID,",
						"          DO_Borough,",
						"          Do_Zone,",
						"          DO_service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'gold/nyctaxifact',",
						"     compressionCodec: 'snappy',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          pickupdate",
						"     )) ~> sink",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'gold/dimpickup',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'gold/dimdropoff',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetSink",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "flatten"
						},
						{
							"name": "flattencc"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customization as (id as short, type as string)[],",
						"          enginecapacity as (cc as (id as short, type as string)[]),",
						"          id as short,",
						"          name as string,",
						"          price as double,",
						"          type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'SampleNestedJson.json',",
						"     documentForm: 'arrayOfDocuments') ~> source",
						"source foldDown(unroll(customization),",
						"     mapColumn(",
						"          customizationid = customization.id,",
						"          id,",
						"          name,",
						"          price,",
						"          type,",
						"          customtype = customization.type,",
						"          enginecapacity",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten",
						"flatten foldDown(unroll(enginecapacity.cc),",
						"     mapColumn(",
						"          customizationid,",
						"          id,",
						"          name,",
						"          price,",
						"          type,",
						"          customtype,",
						"          ccid = enginecapacity.cc.id,",
						"          cctype = enginecapacity.cc.type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattencc",
						"flattencc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]",
				"[concat(variables('factoryId'), '/datasets/ParquetSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_ParseJson')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "stringify1"
						},
						{
							"name": "parse1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customization as (id as short, type as string)[],",
						"          enginecapacity as (cc as (id as short, type as string)[]),",
						"          id as short,",
						"          name as string,",
						"          price as double,",
						"          type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'SampleJsonParse.json',",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 stringify(jsonstring = enginecapacity.cc ? string,",
						"     format: 'json') ~> stringify1",
						"stringify1 parse(newcol = jsonstring ? (id as short,",
						"          type as string),",
						"     format: 'json',",
						"     documentForm: 'arrayOfDocuments') ~> parse1",
						"parse1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'outputjson',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_SCD1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "LookForNULLs"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						},
						{
							"name": "union1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string,",
						"          inserteddate as timestamp,",
						"          updatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/SCD1') ~> source2",
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'taxizonelookup_scd1_ins.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1, source2 join(source1@LocationID == source2@LocationID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 split(isNull(source2@LocationID),",
						"     disjoint: false) ~> LookForNULLs@(hasNULLs, noNULLs)",
						"LookForNULLs@hasNULLs derive(inserteddate = currentTimestamp(),",
						"          updatedDate = toTimestamp('12/31/2078')) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          LocationID = LookForNULLs@hasNULLs@LocationID,",
						"          Borough = LookForNULLs@hasNULLs@Borough,",
						"          Zone = LookForNULLs@hasNULLs@Zone,",
						"          service_zone = LookForNULLs@hasNULLs@service_zone,",
						"          inserteddate,",
						"          updatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"LookForNULLs@noNULLs derive(updatedDate = currentTimestamp()) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          LocationID = LookForNULLs@noNULLs@LocationID,",
						"          Borough = LookForNULLs@noNULLs@Borough,",
						"          Zone = LookForNULLs@noNULLs@Zone,",
						"          service_zone = LookForNULLs@noNULLs@service_zone,",
						"          inserteddate,",
						"          updatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1, select2 union(byName: true)~> union1",
						"union1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/SCD1',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['LocationID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_SCD1_PREP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'taxizonelookup.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 derive(inserteddate = currentTimestamp(),",
						"          updatedDate = toTimestamp('12/31/2078')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/SCD1',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_SCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "LookForNULLs"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "select5"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          IsCurrent as boolean,",
						"          Processime as timestamp,",
						"          surrogatekeycol as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/SCD2') ~> source2",
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'taxizonelookup_scd2.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"join2, source2 join(LocationIDnew == LocationID",
						"     && iscurr == IsCurrent,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 split(isNull(LocationID),",
						"     disjoint: false) ~> LookForNULLs@(hasNULLs, noNULLs)",
						"LookForNULLs@hasNULLs derive(StartDate = currentTimestamp(),",
						"          IsCurrent = true(),",
						"          Processime = currentTimestamp(),",
						"          surrogatekeycolnew = iifNull(surrogatekeycol,0) + maxval+1) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          LocationID = LocationIDnew,",
						"          Borough = Boroughnew,",
						"          Zone = Zonenew,",
						"          service_zone = service_zonenew,",
						"          StartDate,",
						"          EndDate,",
						"          IsCurrent,",
						"          Processime,",
						"          surrogatekeycol = surrogatekeycolnew",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"LookForNULLs@noNULLs select(mapColumn(",
						"          LocationID,",
						"          Borough,",
						"          Zone,",
						"          service_zone,",
						"          StartDate,",
						"          EndDate,",
						"          IsCurrent,",
						"          Processime,",
						"          surrogatekeycol",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select2",
						"derivedColumn5 select(mapColumn(",
						"          LocationIDnew = LocationID,",
						"          Boroughnew = Borough,",
						"          Zonenew = Zone,",
						"          service_zonenew = service_zone,",
						"          iscurr",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select2 derive(IsCurrent = false(),",
						"          Processime = currentTimestamp(),",
						"          EndDate = iifNull(currentTimestamp(), EndDate)) ~> derivedColumn2",
						"LookForNULLs@noNULLs select(mapColumn(",
						"          LocationID = LocationIDnew,",
						"          Borough = Boroughnew,",
						"          Zone = Zonenew,",
						"          service_zone = service_zonenew,",
						"          StartDate,",
						"          EndDate,",
						"          IsCurrent,",
						"          Processime,",
						"          surrogatekeycol",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select4 derive(Processime = currentTimestamp(),",
						"          StartDate = currentTimestamp()) ~> derivedColumn3",
						"source2 aggregate(maxval = max(surrogatekeycol)) ~> aggregate1",
						"select3, aggregate1 join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"derivedColumn3, aggregate2 join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 derive(surrogatekeycol = surrogatekeycol+maxnewval) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          LocationID,",
						"          Borough,",
						"          Zone,",
						"          service_zone,",
						"          StartDate,",
						"          EndDate,",
						"          IsCurrent,",
						"          Processime,",
						"          surrogatekeycol",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select1 aggregate(maxnewval = max(surrogatekeycol)) ~> aggregate2",
						"select1, select5, derivedColumn2 union(byName: true)~> union1",
						"source1 derive(iscurr = true()) ~> derivedColumn5",
						"union1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/SCD2',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['surrogatekeycol'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_SCD2_PREP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'taxizonelookup.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 derive(StartDate = currentTimestamp(),",
						"          EndDate = toTimestamp('12/31/2078'),",
						"          IsCurrent = true(),",
						"          Processime = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 keyGenerate(output(surrogatekeycol as long),",
						"     startAt: 1000L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/SCD2',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Silver_Curation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source"
						},
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sourcelkp"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "join"
						},
						{
							"name": "select"
						},
						{
							"name": "joinn"
						},
						{
							"name": "selectfin"
						}
					],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/NycGreenTaxi') ~> source",
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/zonelookup') ~> sourcelkp",
						"source, sourcelkp join(PULocationID == LocationID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join",
						"join select(mapColumn(",
						"          VendorID,",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          RatecodeID,",
						"          PULocationID,",
						"          DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          PU_Borough = Borough,",
						"          PU_Zone = Zone,",
						"          PU_service_zone = service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"select, sourcelkp join(VendorID == LocationID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinn",
						"joinn select(mapColumn(",
						"          VendorID,",
						"          lpep_pickup_datetime,",
						"          lpep_dropoff_datetime,",
						"          store_and_fwd_flag,",
						"          RatecodeID,",
						"          PULocationID,",
						"          DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          extra,",
						"          mta_tax,",
						"          tip_amount,",
						"          tolls_amount,",
						"          ehail_fee,",
						"          improvement_surcharge,",
						"          total_amount,",
						"          payment_type,",
						"          trip_type,",
						"          congestion_surcharge,",
						"          PU_Borough,",
						"          PU_Zone,",
						"          PU_service_zone,",
						"          DO_Borough = Borough,",
						"          Do_Zone = Zone,",
						"          DO_service_zone = service_zone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectfin",
						"selectfin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'silver/nycgreentaxienhanced',",
						"     overwrite: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "compose",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
						"compose@output derive(fname = '/myfiles/test.csv') ~> derivedColumn",
						"derivedColumn derive(finalfname = split(fname, '/'),",
						"          vname = case(VendorID==1, 'vanme1', 'vname2')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]",
				"[concat(variables('factoryId'), '/datasets/ParquetSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_UDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetSink",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "compose",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"udfLibraries": [
						{
							"referenceName": "stringLib",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
						"compose@output derive(store_and_fwd_flag = TrimValue(store_and_fwd_flag)) ~> derivedColumn",
						"derivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/stringLib')]",
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]",
				"[concat(variables('factoryId'), '/datasets/ParquetSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_WarmUpCluster')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'vendoridlkp.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'Output/warm',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_bronze_curation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sinkbronze"
						}
					],
					"transformations": [
						{
							"name": "compose",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
						"compose@output sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/NycGreenTaxi',",
						"     overwrite: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['VendorID','lpep_pickup_datetime','lpep_dropoff_datetime','PULocationID','DOLocationID','RatecodeID','fare_amount','tip_amount'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkbronze"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_bronze_curation_upsert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'taxizonelookup.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/zonelookup',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['LocationID','Borough','Zone','service_zone'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_mask')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnmask"
						},
						{
							"name": "compose1",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"compose(composition: 'FLW_GreenTaxi') ~> compose1@(output)",
						"compose1@output derive(store_and_fwd_flag = sha2(256, store_and_fwd_flag)) ~> derivedColumnmask",
						"derivedColumnmask sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'bronze/mask',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_window_rank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sourcelkp"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "select"
						},
						{
							"name": "aggregate"
						},
						{
							"name": "windowlag"
						},
						{
							"name": "join"
						},
						{
							"name": "compose",
							"flowlet": {
								"referenceName": "FLW_GreenTaxi",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          LocationID as short,",
						"          Borough as string,",
						"          Zone as string,",
						"          service_zone as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'taxizonelookup.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourcelkp",
						"compose(composition: 'FLW_GreenTaxi') ~> compose@(output)",
						"select derive(pickupdate = toDate(lpep_pickup_datetime)) ~> derivedColumn",
						"join select(mapColumn(",
						"          lpep_pickup_datetime,",
						"          PULocationID,",
						"          DOLocationID,",
						"          passenger_count,",
						"          trip_distance,",
						"          fare_amount,",
						"          tip_amount,",
						"          total_amount,",
						"          pickupborough = Borough",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select",
						"derivedColumn aggregate(groupBy(pickupdate,",
						"          PULocationID,",
						"          pickupborough),",
						"     trip_distance = sum(trip_distance),",
						"          total_amount = sum(total_amount),",
						"          tip_amount = sum(tip_amount)) ~> aggregate",
						"aggregate window(over(pickupdate),",
						"     desc(total_amount, true),",
						"     rank = rank(),",
						"     partitionBy('hash', 1)) ~> windowlag",
						"compose@output, sourcelkp join(PULocationID == LocationID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join",
						"windowlag sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'synpswrkshp',",
						"     folderPath: 'Output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]",
				"[concat(variables('factoryId'), '/dataflows/FLW_GreenTaxi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLW_GreenTaxi')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sourceadls"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "output"
						}
					],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'synpswrkshp',",
						"     fileName: 'green_tripdata_2022-11.parquet') ~> sourceadls",
						"sourceadls output() ~> output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowaggdemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Parquet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageWorkshop",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          VendorID as long,",
						"          lpep_pickup_datetime as timestamp,",
						"          lpep_dropoff_datetime as timestamp,",
						"          store_and_fwd_flag as string,",
						"          RatecodeID as double,",
						"          PULocationID as long,",
						"          DOLocationID as long,",
						"          passenger_count as double,",
						"          trip_distance as double,",
						"          fare_amount as double,",
						"          extra as double,",
						"          mta_tax as double,",
						"          tip_amount as double,",
						"          tolls_amount as double,",
						"          ehail_fee as integer,",
						"          improvement_surcharge as double,",
						"          total_amount as double,",
						"          payment_type as double,",
						"          trip_type as double,",
						"          congestion_surcharge as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 aggregate(groupBy(DOLocationID),",
						"     fare_amount = sum(fare_amount)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'landingbronze',",
						"     folderPath: 'aggregate',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageWorkshop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stringLib')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "common functions for string",
				"type": "UDFLibrary",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [],
					"scriptLines": [
						"TrimValue(string) as string = trim(coalesce(i1,\"\"))"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfcdc1')]",
			"type": "Microsoft.DataFactory/factories/adfcdcs",
			"apiVersion": "2018-06-01",
			"properties": {
				"SourceConnectionsInfo": [
					{
						"SourceEntities": [
							{
								"name": "dbo.ts2_table",
								"properties": {
									"schema": [],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "dbo"
										},
										{
											"name": "tableName",
											"value": "ts2_table"
										},
										{
											"name": "enableCdc",
											"value": true
										},
										{
											"name": "waterMarkColumn",
											"value": "Creationtime"
										}
									]
								}
							}
						],
						"Connection": {
							"linkedService": {
								"referenceName": "AzureSqlDatabasecdc",
								"type": "LinkedServiceReference"
							},
							"linkedServiceType": "AzureSqlDatabase",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "table"
								},
								{
									"name": "store",
									"value": "sqlserver"
								},
								{
									"name": "databaseType",
									"value": "databaseType"
								},
								{
									"name": "database",
									"value": "database"
								},
								{
									"name": "skipInitialLoad",
									"value": true
								}
							]
						}
					}
				],
				"TargetConnectionsInfo": [
					{
						"TargetEntities": [
							{
								"name": "data/ts2_cdc/dbo.ts2_table",
								"properties": {
									"schema": [],
									"dslConnectorProperties": [
										{
											"name": "container",
											"value": "data"
										},
										{
											"name": "fileSystem",
											"value": "data"
										},
										{
											"name": "folderPath",
											"value": "ts2_cdc/dbo.ts2_table"
										},
										{
											"name": "keys",
											"value": [
												"Creationtime"
											]
										},
										{
											"name": "deletable",
											"value": true
										},
										{
											"name": "updateable",
											"value": true
										},
										{
											"name": "upsertable",
											"value": true
										},
										{
											"name": "defaultToUpsert",
											"value": true
										}
									]
								}
							}
						],
						"Connection": {
							"linkedService": {
								"referenceName": "linkedServiceblobcdc",
								"type": "LinkedServiceReference"
							},
							"linkedServiceType": "AzureBlobStorage",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "delta"
								},
								{
									"name": "mergeSchema",
									"value": true
								},
								{
									"name": "autoCompact",
									"value": true
								},
								{
									"name": "optimizedWrite",
									"value": true
								},
								{
									"name": "deletable",
									"value": false
								},
								{
									"name": "insertable",
									"value": true
								},
								{
									"name": "updateable",
									"value": false
								},
								{
									"name": "upsertable",
									"value": false
								},
								{
									"name": "skipDuplicateMapInputs",
									"value": true
								},
								{
									"name": "skipDuplicateMapOutputs",
									"value": true
								}
							]
						},
						"DataMapperMappings": [
							{
								"targetEntityName": "data/ts2_cdc/dbo.ts2_table",
								"sourceEntityName": "dbo.ts2_table",
								"sourceConnectionReference": {
									"connectionName": "AzureSqlDatabasecdc",
									"type": "linkedservicetype"
								},
								"attributeMappingInfo": {
									"attributeMappings": []
								}
							}
						],
						"Relationships": []
					}
				],
				"Policy": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1
					},
					"mode": "Microbatch"
				},
				"allowVNetOverride": false
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasecdc')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedServiceblobcdc')]"
			]
		}
	]
}